// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/niwla23/lagersystem/manager/ent/box"
	"github.com/niwla23/lagersystem/manager/ent/predicate"
	"github.com/niwla23/lagersystem/manager/ent/system"
)

// SystemUpdate is the builder for updating System entities.
type SystemUpdate struct {
	config
	hooks    []Hook
	mutation *SystemMutation
}

// Where appends a list predicates to the SystemUpdate builder.
func (su *SystemUpdate) Where(ps ...predicate.System) *SystemUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "createdAt" field.
func (su *SystemUpdate) SetCreatedAt(t time.Time) *SystemUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (su *SystemUpdate) SetNillableCreatedAt(t *time.Time) *SystemUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetModifiedAt sets the "modifiedAt" field.
func (su *SystemUpdate) SetModifiedAt(t time.Time) *SystemUpdate {
	su.mutation.SetModifiedAt(t)
	return su
}

// SetNillableModifiedAt sets the "modifiedAt" field if the given value is not nil.
func (su *SystemUpdate) SetNillableModifiedAt(t *time.Time) *SystemUpdate {
	if t != nil {
		su.SetModifiedAt(*t)
	}
	return su
}

// SetName sets the "name" field.
func (su *SystemUpdate) SetName(s string) *SystemUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SystemUpdate) SetDescription(s string) *SystemUpdate {
	su.mutation.SetDescription(s)
	return su
}

// AddBoxIDs adds the "boxes" edge to the Box entity by IDs.
func (su *SystemUpdate) AddBoxIDs(ids ...int) *SystemUpdate {
	su.mutation.AddBoxIDs(ids...)
	return su
}

// AddBoxes adds the "boxes" edges to the Box entity.
func (su *SystemUpdate) AddBoxes(b ...*Box) *SystemUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.AddBoxIDs(ids...)
}

// Mutation returns the SystemMutation object of the builder.
func (su *SystemUpdate) Mutation() *SystemMutation {
	return su.mutation
}

// ClearBoxes clears all "boxes" edges to the Box entity.
func (su *SystemUpdate) ClearBoxes() *SystemUpdate {
	su.mutation.ClearBoxes()
	return su
}

// RemoveBoxIDs removes the "boxes" edge to Box entities by IDs.
func (su *SystemUpdate) RemoveBoxIDs(ids ...int) *SystemUpdate {
	su.mutation.RemoveBoxIDs(ids...)
	return su
}

// RemoveBoxes removes "boxes" edges to Box entities.
func (su *SystemUpdate) RemoveBoxes(b ...*Box) *SystemUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.RemoveBoxIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SystemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SystemMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SystemUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SystemUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SystemUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SystemUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := system.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "System.name": %w`, err)}
		}
	}
	return nil
}

func (su *SystemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   system.Table,
			Columns: system.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: system.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(system.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.ModifiedAt(); ok {
		_spec.SetField(system.FieldModifiedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(system.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(system.FieldDescription, field.TypeString, value)
	}
	if su.mutation.BoxesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   system.BoxesTable,
			Columns: []string{system.BoxesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedBoxesIDs(); len(nodes) > 0 && !su.mutation.BoxesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   system.BoxesTable,
			Columns: []string{system.BoxesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BoxesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   system.BoxesTable,
			Columns: []string{system.BoxesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{system.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SystemUpdateOne is the builder for updating a single System entity.
type SystemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemMutation
}

// SetCreatedAt sets the "createdAt" field.
func (suo *SystemUpdateOne) SetCreatedAt(t time.Time) *SystemUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (suo *SystemUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetModifiedAt sets the "modifiedAt" field.
func (suo *SystemUpdateOne) SetModifiedAt(t time.Time) *SystemUpdateOne {
	suo.mutation.SetModifiedAt(t)
	return suo
}

// SetNillableModifiedAt sets the "modifiedAt" field if the given value is not nil.
func (suo *SystemUpdateOne) SetNillableModifiedAt(t *time.Time) *SystemUpdateOne {
	if t != nil {
		suo.SetModifiedAt(*t)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SystemUpdateOne) SetName(s string) *SystemUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SystemUpdateOne) SetDescription(s string) *SystemUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// AddBoxIDs adds the "boxes" edge to the Box entity by IDs.
func (suo *SystemUpdateOne) AddBoxIDs(ids ...int) *SystemUpdateOne {
	suo.mutation.AddBoxIDs(ids...)
	return suo
}

// AddBoxes adds the "boxes" edges to the Box entity.
func (suo *SystemUpdateOne) AddBoxes(b ...*Box) *SystemUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.AddBoxIDs(ids...)
}

// Mutation returns the SystemMutation object of the builder.
func (suo *SystemUpdateOne) Mutation() *SystemMutation {
	return suo.mutation
}

// ClearBoxes clears all "boxes" edges to the Box entity.
func (suo *SystemUpdateOne) ClearBoxes() *SystemUpdateOne {
	suo.mutation.ClearBoxes()
	return suo
}

// RemoveBoxIDs removes the "boxes" edge to Box entities by IDs.
func (suo *SystemUpdateOne) RemoveBoxIDs(ids ...int) *SystemUpdateOne {
	suo.mutation.RemoveBoxIDs(ids...)
	return suo
}

// RemoveBoxes removes "boxes" edges to Box entities.
func (suo *SystemUpdateOne) RemoveBoxes(b ...*Box) *SystemUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.RemoveBoxIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SystemUpdateOne) Select(field string, fields ...string) *SystemUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated System entity.
func (suo *SystemUpdateOne) Save(ctx context.Context) (*System, error) {
	return withHooks[*System, SystemMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SystemUpdateOne) SaveX(ctx context.Context) *System {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SystemUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SystemUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SystemUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := system.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "System.name": %w`, err)}
		}
	}
	return nil
}

func (suo *SystemUpdateOne) sqlSave(ctx context.Context) (_node *System, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   system.Table,
			Columns: system.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: system.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "System.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, system.FieldID)
		for _, f := range fields {
			if !system.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != system.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(system.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ModifiedAt(); ok {
		_spec.SetField(system.FieldModifiedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(system.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(system.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.BoxesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   system.BoxesTable,
			Columns: []string{system.BoxesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedBoxesIDs(); len(nodes) > 0 && !suo.mutation.BoxesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   system.BoxesTable,
			Columns: []string{system.BoxesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BoxesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   system.BoxesTable,
			Columns: []string{system.BoxesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &System{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{system.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
