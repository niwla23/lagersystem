// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/niwla23/lagersystem/manager/ent/box"
	"github.com/niwla23/lagersystem/manager/ent/part"
	"github.com/niwla23/lagersystem/manager/ent/predicate"
	"github.com/niwla23/lagersystem/manager/ent/section"
)

// SectionUpdate is the builder for updating Section entities.
type SectionUpdate struct {
	config
	hooks    []Hook
	mutation *SectionMutation
}

// Where appends a list predicates to the SectionUpdate builder.
func (su *SectionUpdate) Where(ps ...predicate.Section) *SectionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "createdAt" field.
func (su *SectionUpdate) SetCreatedAt(t time.Time) *SectionUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (su *SectionUpdate) SetNillableCreatedAt(t *time.Time) *SectionUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetBoxID sets the "box" edge to the Box entity by ID.
func (su *SectionUpdate) SetBoxID(id int) *SectionUpdate {
	su.mutation.SetBoxID(id)
	return su
}

// SetNillableBoxID sets the "box" edge to the Box entity by ID if the given value is not nil.
func (su *SectionUpdate) SetNillableBoxID(id *int) *SectionUpdate {
	if id != nil {
		su = su.SetBoxID(*id)
	}
	return su
}

// SetBox sets the "box" edge to the Box entity.
func (su *SectionUpdate) SetBox(b *Box) *SectionUpdate {
	return su.SetBoxID(b.ID)
}

// AddPartIDs adds the "parts" edge to the Part entity by IDs.
func (su *SectionUpdate) AddPartIDs(ids ...int) *SectionUpdate {
	su.mutation.AddPartIDs(ids...)
	return su
}

// AddParts adds the "parts" edges to the Part entity.
func (su *SectionUpdate) AddParts(p ...*Part) *SectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPartIDs(ids...)
}

// Mutation returns the SectionMutation object of the builder.
func (su *SectionUpdate) Mutation() *SectionMutation {
	return su.mutation
}

// ClearBox clears the "box" edge to the Box entity.
func (su *SectionUpdate) ClearBox() *SectionUpdate {
	su.mutation.ClearBox()
	return su
}

// ClearParts clears all "parts" edges to the Part entity.
func (su *SectionUpdate) ClearParts() *SectionUpdate {
	su.mutation.ClearParts()
	return su
}

// RemovePartIDs removes the "parts" edge to Part entities by IDs.
func (su *SectionUpdate) RemovePartIDs(ids ...int) *SectionUpdate {
	su.mutation.RemovePartIDs(ids...)
	return su
}

// RemoveParts removes "parts" edges to Part entities.
func (su *SectionUpdate) RemoveParts(p ...*Part) *SectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePartIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SectionMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SectionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SectionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SectionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   section.Table,
			Columns: section.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: section.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(section.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.BoxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.BoxTable,
			Columns: []string{section.BoxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BoxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.BoxTable,
			Columns: []string{section.BoxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   section.PartsTable,
			Columns: section.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPartsIDs(); len(nodes) > 0 && !su.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   section.PartsTable,
			Columns: section.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   section.PartsTable,
			Columns: section.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SectionUpdateOne is the builder for updating a single Section entity.
type SectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SectionMutation
}

// SetCreatedAt sets the "createdAt" field.
func (suo *SectionUpdateOne) SetCreatedAt(t time.Time) *SectionUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (suo *SectionUpdateOne) SetNillableCreatedAt(t *time.Time) *SectionUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetBoxID sets the "box" edge to the Box entity by ID.
func (suo *SectionUpdateOne) SetBoxID(id int) *SectionUpdateOne {
	suo.mutation.SetBoxID(id)
	return suo
}

// SetNillableBoxID sets the "box" edge to the Box entity by ID if the given value is not nil.
func (suo *SectionUpdateOne) SetNillableBoxID(id *int) *SectionUpdateOne {
	if id != nil {
		suo = suo.SetBoxID(*id)
	}
	return suo
}

// SetBox sets the "box" edge to the Box entity.
func (suo *SectionUpdateOne) SetBox(b *Box) *SectionUpdateOne {
	return suo.SetBoxID(b.ID)
}

// AddPartIDs adds the "parts" edge to the Part entity by IDs.
func (suo *SectionUpdateOne) AddPartIDs(ids ...int) *SectionUpdateOne {
	suo.mutation.AddPartIDs(ids...)
	return suo
}

// AddParts adds the "parts" edges to the Part entity.
func (suo *SectionUpdateOne) AddParts(p ...*Part) *SectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPartIDs(ids...)
}

// Mutation returns the SectionMutation object of the builder.
func (suo *SectionUpdateOne) Mutation() *SectionMutation {
	return suo.mutation
}

// ClearBox clears the "box" edge to the Box entity.
func (suo *SectionUpdateOne) ClearBox() *SectionUpdateOne {
	suo.mutation.ClearBox()
	return suo
}

// ClearParts clears all "parts" edges to the Part entity.
func (suo *SectionUpdateOne) ClearParts() *SectionUpdateOne {
	suo.mutation.ClearParts()
	return suo
}

// RemovePartIDs removes the "parts" edge to Part entities by IDs.
func (suo *SectionUpdateOne) RemovePartIDs(ids ...int) *SectionUpdateOne {
	suo.mutation.RemovePartIDs(ids...)
	return suo
}

// RemoveParts removes "parts" edges to Part entities.
func (suo *SectionUpdateOne) RemoveParts(p ...*Part) *SectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePartIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SectionUpdateOne) Select(field string, fields ...string) *SectionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Section entity.
func (suo *SectionUpdateOne) Save(ctx context.Context) (*Section, error) {
	return withHooks[*Section, SectionMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SectionUpdateOne) SaveX(ctx context.Context) *Section {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SectionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SectionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SectionUpdateOne) sqlSave(ctx context.Context) (_node *Section, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   section.Table,
			Columns: section.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: section.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Section.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, section.FieldID)
		for _, f := range fields {
			if !section.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != section.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(section.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.BoxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.BoxTable,
			Columns: []string{section.BoxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BoxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.BoxTable,
			Columns: []string{section.BoxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: box.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   section.PartsTable,
			Columns: section.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPartsIDs(); len(nodes) > 0 && !suo.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   section.PartsTable,
			Columns: section.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   section.PartsTable,
			Columns: section.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Section{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
