// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/niwla23/lagersystem/manager/ent/generated/position"
	"github.com/niwla23/lagersystem/manager/ent/generated/predicate"
	"github.com/niwla23/lagersystem/manager/ent/generated/warehouse"
)

// WarehouseUpdate is the builder for updating Warehouse entities.
type WarehouseUpdate struct {
	config
	hooks    []Hook
	mutation *WarehouseMutation
}

// Where appends a list predicates to the WarehouseUpdate builder.
func (wu *WarehouseUpdate) Where(ps ...predicate.Warehouse) *WarehouseUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetCreatedAt sets the "createdAt" field.
func (wu *WarehouseUpdate) SetCreatedAt(t time.Time) *WarehouseUpdate {
	wu.mutation.SetCreatedAt(t)
	return wu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableCreatedAt(t *time.Time) *WarehouseUpdate {
	if t != nil {
		wu.SetCreatedAt(*t)
	}
	return wu
}

// SetUpdatedAt sets the "updatedAt" field.
func (wu *WarehouseUpdate) SetUpdatedAt(t time.Time) *WarehouseUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableUpdatedAt(t *time.Time) *WarehouseUpdate {
	if t != nil {
		wu.SetUpdatedAt(*t)
	}
	return wu
}

// SetName sets the "name" field.
func (wu *WarehouseUpdate) SetName(s string) *WarehouseUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WarehouseUpdate) SetDescription(s string) *WarehouseUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (wu *WarehouseUpdate) AddPositionIDs(ids ...int) *WarehouseUpdate {
	wu.mutation.AddPositionIDs(ids...)
	return wu
}

// AddPositions adds the "positions" edges to the Position entity.
func (wu *WarehouseUpdate) AddPositions(p ...*Position) *WarehouseUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wu.AddPositionIDs(ids...)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wu *WarehouseUpdate) Mutation() *WarehouseMutation {
	return wu.mutation
}

// ClearPositions clears all "positions" edges to the Position entity.
func (wu *WarehouseUpdate) ClearPositions() *WarehouseUpdate {
	wu.mutation.ClearPositions()
	return wu
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (wu *WarehouseUpdate) RemovePositionIDs(ids ...int) *WarehouseUpdate {
	wu.mutation.RemovePositionIDs(ids...)
	return wu
}

// RemovePositions removes "positions" edges to Position entities.
func (wu *WarehouseUpdate) RemovePositions(p ...*Position) *WarehouseUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wu.RemovePositionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WarehouseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WarehouseMutation](ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WarehouseUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WarehouseUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WarehouseUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WarehouseUpdate) check() error {
	if v, ok := wu.mutation.Name(); ok {
		if err := warehouse.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Warehouse.name": %w`, err)}
		}
	}
	return nil
}

func (wu *WarehouseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   warehouse.Table,
			Columns: warehouse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: warehouse.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(warehouse.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(warehouse.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(warehouse.FieldDescription, field.TypeString, value)
	}
	if wu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.PositionsTable,
			Columns: []string{warehouse.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !wu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.PositionsTable,
			Columns: []string{warehouse.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.PositionsTable,
			Columns: []string{warehouse.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warehouse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WarehouseUpdateOne is the builder for updating a single Warehouse entity.
type WarehouseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WarehouseMutation
}

// SetCreatedAt sets the "createdAt" field.
func (wuo *WarehouseUpdateOne) SetCreatedAt(t time.Time) *WarehouseUpdateOne {
	wuo.mutation.SetCreatedAt(t)
	return wuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableCreatedAt(t *time.Time) *WarehouseUpdateOne {
	if t != nil {
		wuo.SetCreatedAt(*t)
	}
	return wuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (wuo *WarehouseUpdateOne) SetUpdatedAt(t time.Time) *WarehouseUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableUpdatedAt(t *time.Time) *WarehouseUpdateOne {
	if t != nil {
		wuo.SetUpdatedAt(*t)
	}
	return wuo
}

// SetName sets the "name" field.
func (wuo *WarehouseUpdateOne) SetName(s string) *WarehouseUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WarehouseUpdateOne) SetDescription(s string) *WarehouseUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (wuo *WarehouseUpdateOne) AddPositionIDs(ids ...int) *WarehouseUpdateOne {
	wuo.mutation.AddPositionIDs(ids...)
	return wuo
}

// AddPositions adds the "positions" edges to the Position entity.
func (wuo *WarehouseUpdateOne) AddPositions(p ...*Position) *WarehouseUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wuo.AddPositionIDs(ids...)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wuo *WarehouseUpdateOne) Mutation() *WarehouseMutation {
	return wuo.mutation
}

// ClearPositions clears all "positions" edges to the Position entity.
func (wuo *WarehouseUpdateOne) ClearPositions() *WarehouseUpdateOne {
	wuo.mutation.ClearPositions()
	return wuo
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (wuo *WarehouseUpdateOne) RemovePositionIDs(ids ...int) *WarehouseUpdateOne {
	wuo.mutation.RemovePositionIDs(ids...)
	return wuo
}

// RemovePositions removes "positions" edges to Position entities.
func (wuo *WarehouseUpdateOne) RemovePositions(p ...*Position) *WarehouseUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wuo.RemovePositionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WarehouseUpdateOne) Select(field string, fields ...string) *WarehouseUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Warehouse entity.
func (wuo *WarehouseUpdateOne) Save(ctx context.Context) (*Warehouse, error) {
	return withHooks[*Warehouse, WarehouseMutation](ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WarehouseUpdateOne) SaveX(ctx context.Context) *Warehouse {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WarehouseUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WarehouseUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WarehouseUpdateOne) check() error {
	if v, ok := wuo.mutation.Name(); ok {
		if err := warehouse.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Warehouse.name": %w`, err)}
		}
	}
	return nil
}

func (wuo *WarehouseUpdateOne) sqlSave(ctx context.Context) (_node *Warehouse, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   warehouse.Table,
			Columns: warehouse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: warehouse.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Warehouse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, warehouse.FieldID)
		for _, f := range fields {
			if !warehouse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != warehouse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(warehouse.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(warehouse.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(warehouse.FieldDescription, field.TypeString, value)
	}
	if wuo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.PositionsTable,
			Columns: []string{warehouse.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !wuo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.PositionsTable,
			Columns: []string{warehouse.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.PositionsTable,
			Columns: []string{warehouse.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Warehouse{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warehouse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
