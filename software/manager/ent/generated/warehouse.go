// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/niwla23/lagersystem/manager/ent/generated/warehouse"
)

// Warehouse is the model entity for the Warehouse schema.
type Warehouse struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WarehouseQuery when eager-loading is set.
	Edges WarehouseEdges `json:"-"`
}

// WarehouseEdges holds the relations/edges for other nodes in the graph.
type WarehouseEdges struct {
	// Positions holds the value of the positions edge.
	Positions []*Position `json:"positions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PositionsOrErr returns the Positions value or an error if the edge
// was not loaded in eager-loading.
func (e WarehouseEdges) PositionsOrErr() ([]*Position, error) {
	if e.loadedTypes[0] {
		return e.Positions, nil
	}
	return nil, &NotLoadedError{edge: "positions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Warehouse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldID:
			values[i] = new(sql.NullInt64)
		case warehouse.FieldName, warehouse.FieldDescription:
			values[i] = new(sql.NullString)
		case warehouse.FieldCreatedAt, warehouse.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Warehouse", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Warehouse fields.
func (w *Warehouse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case warehouse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case warehouse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case warehouse.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case warehouse.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = value.String
			}
		}
	}
	return nil
}

// QueryPositions queries the "positions" edge of the Warehouse entity.
func (w *Warehouse) QueryPositions() *PositionQuery {
	return NewWarehouseClient(w.config).QueryPositions(w)
}

// Update returns a builder for updating this Warehouse.
// Note that you need to call Warehouse.Unwrap() before calling this method if this Warehouse
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Warehouse) Update() *WarehouseUpdateOne {
	return NewWarehouseClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Warehouse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Warehouse) Unwrap() *Warehouse {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("generated: Warehouse is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Warehouse) String() string {
	var builder strings.Builder
	builder.WriteString("Warehouse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(w.Description)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (w *Warehouse) MarshalJSON() ([]byte, error) {
	type Alias Warehouse
	return json.Marshal(&struct {
		*Alias
		WarehouseEdges
	}{
		Alias:          (*Alias)(w),
		WarehouseEdges: w.Edges,
	})
}

// Warehouses is a parsable slice of Warehouse.
type Warehouses []*Warehouse

func (w Warehouses) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
