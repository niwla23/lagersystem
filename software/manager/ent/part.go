// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/niwla23/lagersystem/manager/ent/part"
	"github.com/niwla23/lagersystem/manager/ent/section"
)

// Part is the model entity for the Part schema.
type Part struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// -1 means amount is unknown
	Amount int `json:"amount"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartQuery when eager-loading is set.
	Edges        PartEdges `json:"-"`
	part_section *int
}

// PartEdges holds the relations/edges for other nodes in the graph.
type PartEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Properties holds the value of the properties edge.
	Properties []*Property `json:"properties,omitempty"`
	// Section holds the value of the section edge.
	Section *Section `json:"section,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e PartEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// PropertiesOrErr returns the Properties value or an error if the edge
// was not loaded in eager-loading.
func (e PartEdges) PropertiesOrErr() ([]*Property, error) {
	if e.loadedTypes[1] {
		return e.Properties, nil
	}
	return nil, &NotLoadedError{edge: "properties"}
}

// SectionOrErr returns the Section value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartEdges) SectionOrErr() (*Section, error) {
	if e.loadedTypes[2] {
		if e.Section == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: section.Label}
		}
		return e.Section, nil
	}
	return nil, &NotLoadedError{edge: "section"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Part) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case part.FieldDeleted:
			values[i] = new(sql.NullBool)
		case part.FieldID, part.FieldAmount:
			values[i] = new(sql.NullInt64)
		case part.FieldName, part.FieldDescription:
			values[i] = new(sql.NullString)
		case part.FieldCreatedAt, part.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case part.ForeignKeys[0]: // part_section
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Part", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Part fields.
func (pa *Part) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case part.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case part.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case part.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case part.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				pa.Deleted = value.Bool
			}
		case part.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case part.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pa.Description = value.String
			}
		case part.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pa.Amount = int(value.Int64)
			}
		case part.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field part_section", value)
			} else if value.Valid {
				pa.part_section = new(int)
				*pa.part_section = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTags queries the "tags" edge of the Part entity.
func (pa *Part) QueryTags() *TagQuery {
	return NewPartClient(pa.config).QueryTags(pa)
}

// QueryProperties queries the "properties" edge of the Part entity.
func (pa *Part) QueryProperties() *PropertyQuery {
	return NewPartClient(pa.config).QueryProperties(pa)
}

// QuerySection queries the "section" edge of the Part entity.
func (pa *Part) QuerySection() *SectionQuery {
	return NewPartClient(pa.config).QuerySection(pa)
}

// Update returns a builder for updating this Part.
// Note that you need to call Part.Unwrap() before calling this method if this Part
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Part) Update() *PartUpdateOne {
	return NewPartClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Part entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Part) Unwrap() *Part {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Part is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Part) String() string {
	var builder strings.Builder
	builder.WriteString("Part(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", pa.Deleted))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pa.Description)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (pa *Part) MarshalJSON() ([]byte, error) {
	type Alias Part
	return json.Marshal(&struct {
		*Alias
		PartEdges
	}{
		Alias:     (*Alias)(pa),
		PartEdges: pa.Edges,
	})
}

// Parts is a parsable slice of Part.
type Parts []*Part

func (pa Parts) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
