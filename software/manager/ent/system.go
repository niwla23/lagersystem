// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/niwla23/lagersystem/manager/ent/system"
)

// System is the model entity for the System schema.
type System struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// ModifiedAt holds the value of the "modifiedAt" field.
	ModifiedAt time.Time `json:"modifiedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemQuery when eager-loading is set.
	Edges SystemEdges `json:"edges"`
}

// SystemEdges holds the relations/edges for other nodes in the graph.
type SystemEdges struct {
	// Boxes holds the value of the boxes edge.
	Boxes []*Box `json:"boxes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BoxesOrErr returns the Boxes value or an error if the edge
// was not loaded in eager-loading.
func (e SystemEdges) BoxesOrErr() ([]*Box, error) {
	if e.loadedTypes[0] {
		return e.Boxes, nil
	}
	return nil, &NotLoadedError{edge: "boxes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*System) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case system.FieldID:
			values[i] = new(sql.NullInt64)
		case system.FieldName, system.FieldDescription:
			values[i] = new(sql.NullString)
		case system.FieldCreatedAt, system.FieldModifiedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type System", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the System fields.
func (s *System) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case system.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case system.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case system.FieldModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modifiedAt", values[i])
			} else if value.Valid {
				s.ModifiedAt = value.Time
			}
		case system.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case system.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		}
	}
	return nil
}

// QueryBoxes queries the "boxes" edge of the System entity.
func (s *System) QueryBoxes() *BoxQuery {
	return NewSystemClient(s.config).QueryBoxes(s)
}

// Update returns a builder for updating this System.
// Note that you need to call System.Unwrap() before calling this method if this System
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *System) Update() *SystemUpdateOne {
	return NewSystemClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the System entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *System) Unwrap() *System {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: System is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *System) String() string {
	var builder strings.Builder
	builder.WriteString("System(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modifiedAt=")
	builder.WriteString(s.ModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Systems is a parsable slice of System.
type Systems []*System

func (s Systems) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
